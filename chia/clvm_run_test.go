package chia

import (
	"encoding/hex"
	"strings"
	"testing"
)

var tests = []struct {
	name       string
	cmd        string
	out        string
	cost       int64
	maxCost    int64
	noKeywords bool
	strict     bool
	dump       bool
}{
	{
		name: "add-1",
		cmd:  `(+ (q . 7) (q . 1))`,
		out:  `8`,
		cost: 805,
	},
	{
		name: "add-2",
		cmd:  `(+ (q . 1))`,
		out:  `1`,
		cost: 462,
	},
	{
		name: "add-3",
		cmd:  `(+ ())`,
		out:  `()`,
		cost: 473,
	},
	{
		name: "add-4",
		cmd:  `(+)`,
		out:  `()`,
		cost: 109,
	},
	{
		name: "add-5",
		cmd:  `(+ (q . 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000007) (q . 0x000000000000000000000000000000000000000000000000000000000000000000000001))`,
		out:  `8`,
		cost: 1030,
	},
	{
		name: "all-1",
		cmd:  `(all (q . 1))`,
		out:  `1`,
		cost: 530,
	},
	{
		name: "all-2",
		cmd:  `(all (q . 1) (q . (foo)))`,
		out:  `1`,
		cost: 850,
	},
	{
		name: "all-3",
		cmd:  `(all (q . 1) (q . 1) (q . 0))`,
		out:  `()`,
		cost: 1170,
	},
	{
		name: "any-1",
		cmd:  `(any (q . 1))`,
		out:  `1`,
		cost: 530,
	},
	{
		name: "any-2",
		cmd:  `(any (q . 0) (q . (foo)))`,
		out:  `1`,
		cost: 850,
	},
	{
		name: "any-3",
		cmd:  `(any (q . 0) (q . 0))`,
		out:  `()`,
		cost: 850,
	},
	{
		name: "apply-00",
		cmd:  `(a (q . 2) (q . (3 4 5)))`,
		out:  `3`,
		cost: 188,
	},
	{
		name: "apply-01",
		cmd:  `(a (q . 5) (q . (3 4 5)))`,
		out:  `4`,
		cost: 192,
	},
	{
		name: "apply-02",
		cmd:  `(a (q . 11) 1) (5 6 7 8 9)`,
		out:  `7`,
		cost: 220,
	},
	// {
	// 	name: "apply-03",
	// 	cmd:  `(a)`,
	// 	out:  `FAIL: apply requires exactly 2 parameters ()`,
	// },
	// {
	// 	name: "apply-04",
	// 	cmd:  `(a (q . +))`,
	// 	out:  `FAIL: apply requires exactly 2 parameters (+)`,
	// },
	// {
	// 	name: "apply-05",
	// 	cmd:  `(a (q . +) (q . (1 2 3)) (q . foo))`,
	// 	out:  `FAIL: apply requires exactly 2 parameters (+ (q 2 3) "foo")`,
	// },
	{
		name: "apply-06",
		cmd:  `(a (q . (+ 2 5)) (q . (20 30)))`,
		out:  `50`,
		cost: 996,
	},
	{
		name:       "apply-07",
		cmd:        `(a (q . q) (q . (2 3 4)))`,
		out:        `(2 3 4)`,
		cost:       184,
		strict:     true,
		noKeywords: true,
	},
	{
		name:       "args-00",
		cmd:        `0 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `()`,
		cost:       53,
		noKeywords: true,
	},
	{
		name:       "args-01",
		cmd:        `1 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `(((8 . 12) 10 . 14) (9 . 13) 11 . 15)`,
		cost:       53,
		noKeywords: true,
	},
	{
		name:       "args-02",
		cmd:        `2 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `((8 . 12) 10 . 14)`,
		cost:       57,
		noKeywords: true,
	},
	{
		name:       "args-03",
		cmd:        `3 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `((9 . 13) 11 . 15)`,
		cost:       57,
		noKeywords: true,
	},
	{
		name:       "args-04",
		cmd:        `4 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `(8 . 12)`,
		cost:       61,
		noKeywords: true,
	},
	{
		name:       "args-05",
		cmd:        `5 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `(9 . 13)`,
		cost:       61,
		noKeywords: true,
	},
	{
		name:       "args-06",
		cmd:        `6 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `(10 . 14)`,
		cost:       61,
		noKeywords: true,
	},
	{
		name:       "args-07",
		cmd:        `7 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `(11 . 15)`,
		cost:       61,
		noKeywords: true,
	},
	{
		name:       "args-08",
		cmd:        `8 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `8`,
		cost:       65,
		noKeywords: true,
	},
	{
		name:       "args-09",
		cmd:        `9 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `9`,
		cost:       65,
		noKeywords: true,
	},
	{
		name:       "args-10",
		cmd:        `10 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `10`,
		cost:       65,
		noKeywords: true,
	},
	{
		name:       "args-11",
		cmd:        `11 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `11`,
		cost:       65,
		noKeywords: true,
	},
	{
		name:       "args-12",
		cmd:        `12 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `12`,
		cost:       65,
		noKeywords: true,
	},
	{
		name:       "args-13",
		cmd:        `13 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `13`,
		cost:       65,
		noKeywords: true,
	},
	{
		name:       "args-14",
		cmd:        `14 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `14`,
		cost:       65,
		noKeywords: true,
	},
	{
		name:       "args-15",
		cmd:        `15 (((8 . 12) . (10 . 14)) . ((9 . 13) . (11 . 15)))`,
		out:        `15`,
		cost:       65,
		noKeywords: true,
	},
	{
		name: "ash-1",
		cmd:  `(ash (q . 7) (q . 1))`,
		out:  `14`,
		cost: 662,
	},
	{
		name: "ash-2",
		cmd:  `(ash (q . 7) (q . 100))`,
		out:  `0x70000000000000000000000000`,
		cost: 818,
	},
	{
		name: "ash-3",
		cmd:  `(ash (q . -7) (q . 100))`,
		out:  `0x90000000000000000000000000`,
		cost: 818,
	},
	{
		name: "ash-4",
		cmd:  `(ash (q . 0x90000000000000000000000000) (q . -100))`,
		out:  `-7`,
		cost: 698,
	},
	{
		name:       "ash-5",
		cmd:        `(ash (q . 1))`,
		out:        `FAIL: ash takes exactly 2 arguments (1)`,
		cost:       -1,
		noKeywords: true,
	},
	{
		name:       "ash-6",
		cmd:        `(ash (q . 1) (q . 1) (q . 1))`,
		out:        `FAIL: ash takes exactly 2 arguments (1 1 1)`,
		cost:       -1,
		noKeywords: true,
	},
	{
		name: "ash-7",
		cmd:  `(ash (q . (foo)) (q . 1))`,
		out:  `FAIL: ash requires int args ("foo")`,
	},
	{
		name: "ash-8",
		cmd:  `(ash (q . 500) (q . 65535))`,
		out:  `0x00fa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`,
		cost: 107171,
	},
	{
		name: "ash-9",
		cmd:  `(ash (q . 500) (q . -65535))`,
		out:  `()`,
		cost: 652,
	},
	{
		name: "ash-a",
		cmd:  `(ash (q . 500) (q . 65536))`,
		out:  `FAIL: shift too large 0x010000`,
	},
	{
		name: "ash-b",
		cmd:  `(ash (q . 500) (q . -65536))`,
		out:  `FAIL: shift too large 0xff0000`,
	},
	{
		name: "ash-c",
		cmd:  `(ash (q . 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007) (q . 0x0000000000000000000000000000000000000000000000000000000000000001))`,
		out:  `FAIL: ash requires int32 args (with no leading zeros) 0x0000000000000000000000000000000000000000000000000000000000000001`,
	},
	{
		name: "concat-1",
		cmd:  `(concat)`,
		out:  `()`,
		cost: 152,
	},
	{
		name: "concat-2",
		cmd:  `(concat (q . foo))`,
		out:  `"foo"`,
		cost: 346,
	},
	{
		name: "concat-3",
		cmd:  `(concat (q . foo) (q . bar))`,
		out:  `"foobar"`,
		cost: 540,
	},
	{
		name: "concat-4",
		cmd:  `(concat (q . foo) (q . (bar)))`,
		out:  `FAIL: concat on list: arg=("bar")`,
	},
	{
		name: "cons-1",
		cmd:  `(c)`,
		out:  `FAIL: c takes exactly 2 arguments, got 0: args=nil`,
	},
	{
		name: "cons-2",
		cmd:  `(c (q . 100) (q . ()))`,
		out:  `(100)`,
		cost: 100,
	},
	{
		name: "cons-3",
		cmd:  `(c (q . 100) (q . (200 300 400)))`,
		out:  `(100 200 300 400)`,
		cost: 100,
	},
	{
		name: "cons-4",
		cmd:  `(c (q . 100) (q . ((500 (200 300 400)))))`,
		out:  `(100 (500 (200 300 400)))`,
		cost: 100,
	},
	{
		name: "cons-5",
		cmd:  `(c (q . 100))`,
		out:  `FAIL: c takes exactly 2 arguments, got 1: args=(100)`,
	},
	{
		name: "cons-as-op-1",
		cmd:  `((c (q . (+ (q . 50) 1)) (q . 500)))`,
		out:  `FAIL: in ((X)...) syntax X must be lone atom: sexp=((c (q 16 (q . 50) 1) (q . 500)))`,
	},
	{
		name: "div-1",
		cmd:  `(/ 2 5) (80001 73)`,
		out:  `1095`,
		cost: 1134,
	},
	{
		name: "div-2",
		cmd:  `(/ 2 5) (-80001 73)`,
		out:  `-1096`,
		cost: 1134,
	},
	{
		name: "div-3",
		cmd:  `(/ 2 5) (80001 -73)`,
		out:  `-1096`,
		cost: 1134,
	},
	{
		name: "div-4",
		cmd:  `(/ 2 5) (80001 0)`,
		out:  `FAIL: div with 0 0x013881`,
	},
	{
		name: "div-5",
		cmd:  `(/ (q . 0x00000000000000000000000000000000000000000000000000000000a) (q . 0x000000000000000000000000000000000000000000000000000000000000000000000005))`,
		out:  `2`,
		cost: 1308,
	},
	{
		name: "divmod-1",
		cmd:  `(divmod 2 5) (80001 73)`,
		out:  `(1095 . 66)`,
		cost: 1280,
	},
	{
		name: "divmod-10",
		cmd:  `(divmod 2 5) (80000 -10)`,
		out:  `(-8000)`,
		cost: 1270,
	},
	{
		name: "divmod-11",
		cmd:  `(divmod (q . 0x0000000000000000000000000000000000000000000000000000000000000013881) (q . 0x0000000000000000000000000000000000000000000000000000049))`,
		out:  `(1095 . 66)`,
		cost: 1568,
	},
	{
		name:       "divmod-12",
		cmd:        `(divmod (q . -10) (q . -7))`,
		out:        `(1 . -3)`,
		cost:       1198,
		noKeywords: true,
	},
	{
		name:       "divmod-13",
		cmd:        `(divmod (q . -10) (q . 7))`,
		out:        `(-2 . 4)`,
		cost:       1198,
		noKeywords: true,
	},
	{
		name:       "divmod-14",
		cmd:        `(divmod (q . 10) (q . -7))`,
		out:        `(-2 . -4)`,
		cost:       1198,
		noKeywords: true,
	},
	{
		name:       "divmod-15",
		cmd:        `(divmod (q . 10) (q . 7))`,
		out:        `(1 . 3)`,
		cost:       1198,
		noKeywords: true,
	},
	{
		name:       "divmod-16",
		cmd:        `(divmod (q . -10) (q . -70))`,
		out:        `(() . -10)`,
		cost:       1188,
		noKeywords: true,
	},
	{
		name:       "divmod-17",
		cmd:        `(divmod (q . -10) (q . 70))`,
		out:        `(-1 . 60)`,
		cost:       1198,
		noKeywords: true,
	},
	{
		name:       "divmod-18",
		cmd:        `(divmod (q . 10) (q . -70))`,
		out:        `(-1 . -60)`,
		cost:       1198,
		noKeywords: true,
	},
	{
		name:       "divmod-19",
		cmd:        `(divmod (q . 10) (q . 70))`,
		out:        `(() . 10)`,
		cost:       1188,
		noKeywords: true,
	},
	{
		name: "divmod-2",
		cmd:  `(divmod 2 5) (-80001 73)`,
		out:  `(-1096 . 7)`,
		cost: 1280,
	},
	{
		name:       "divmod-20",
		cmd:        `(divmod (q . -100) (q . -7))`,
		out:        `(14 . -2)`,
		cost:       1198,
		noKeywords: true,
	},
	{
		name:       "divmod-21",
		cmd:        `(divmod (q . -100) (q . 7))`,
		out:        `(-15 . 5)`,
		cost:       1198,
		noKeywords: true,
	},
	{
		name:       "divmod-22",
		cmd:        `(divmod (q . 100) (q . -7))`,
		out:        `(-15 . -5)`,
		cost:       1198,
		noKeywords: true,
	},
	{
		name:       "divmod-23",
		cmd:        `(divmod (q . 100) (q . 7))`,
		out:        `(14 . 2)`,
		cost:       1198,
		noKeywords: true,
	},
	{
		name:       "divmod-24",
		cmd:        `(divmod (q . -100) (q . -70))`,
		out:        `(1 . -30)`,
		cost:       1198,
		noKeywords: true,
	},
	{
		name:       "divmod-25",
		cmd:        `(divmod (q . -100) (q . 70))`,
		out:        `(-2 . 40)`,
		cost:       1198,
		noKeywords: true,
	},
	{
		name:       "divmod-26",
		cmd:        `(divmod (q . 100) (q . -70))`,
		out:        `(-2 . -40)`,
		cost:       1198,
		noKeywords: true,
	},
	{
		name:       "divmod-27",
		cmd:        `(divmod (q . 100) (q . 70))`,
		out:        `(1 . 30)`,
		cost:       1198,
		noKeywords: true,
	},
	{
		name: "divmod-3",
		cmd:  `(divmod 2 5) (80001 -73)`,
		out:  `(-1096 . -7)`,
		cost: 1280,
	},
	{
		name: "divmod-4",
		cmd:  `(divmod 2 5) (-80001 -73)`,
		out:  `(1095 . -66)`,
		cost: 1280,
	},
	{
		name: "divmod-5",
		cmd:  `(divmod 2 5) ((200 80001) 73)`,
		out:  `FAIL: divmod requires int args (200 0x013881)`,
	},
	{
		name: "divmod-6",
		cmd:  `(divmod 2 5) (80001 (200 73))`,
		out:  `FAIL: divmod requires int args (200 73)`,
	},
	{
		name: "divmod-7",
		cmd:  `(divmod 2 5) (80001 0)`,
		out:  `FAIL: divmod with 0 0x013881`,
	},
	{
		name: "divmod-8",
		cmd:  `(divmod 2 5) (80000 10)`,
		out:  `(8000)`,
		cost: 1270,
	},
	{
		name: "divmod-9",
		cmd:  `(divmod 2 5) (-80000 10)`,
		out:  `(-8000)`,
		cost: 1270,
	},
	{
		name: "double-cons-1",
		cmd:  `((+) 1 2 3 4)`,
		out:  `10`,
		cost: 1500,
	},
	// {
	// 	name: "double-cons-2",
	// 	cmd:  `((*) 1 2 3 4)`,
	// 	out:  `24`,
	// 	cost: 2892,
	// },
	// {
	// 	name: "double-cons-3",
	// 	cmd:  `((+ . foo) 1 2 3)`,
	// 	out:  `FAIL: in ((X)...) syntax X must be lone atom ((+ . "foo") 1 2 3)`,
	// },
	// {
	// 	name: "double-cons-4",
	// 	cmd:  `(((+)) 1 2 3)`,
	// 	out:  `FAIL: in ((X)...) syntax X must be lone atom (((+)) 1 2 3)`,
	// },
	{
		name: "env-1",
		cmd:  `1 (100)`,
		out:  `(100)`,
		cost: 53,
	},
	{
		name: "env-2",
		cmd:  `1 (990)`,
		out:  `(990)`,
		cost: 53,
	},
	{
		name: "env-3",
		cmd:  `1`,
		out:  `()`,
		cost: 53,
	},
	{
		name: "env-4",
		cmd:  `1 (100 200)`,
		out:  `(100 200)`,
		cost: 53,
	},
	{
		name: "env-5",
		cmd:  `1 ((100 101 102) 105)`,
		out:  `((100 101 102) 105)`,
		cost: 53,
	},
	{
		name: "equal-1",
		cmd:  `(= (q . 10))`,
		out:  `FAIL: = takes exactly 2 arguments, got 1: args=(>s)`,
	},
	{
		name: "equal-10",
		cmd:  `(= (q . 0xq . 0x`,
		out:  `1`,
		cost: 857,
	},
	{
		name: "equal-11",
		cmd:  `(= (q . 0) (q . (0)))`,
		out:  `FAIL: = on list: arg1=(nil)`,
	},
	{
		name: "equal-2",
		cmd:  `(= (q . 10) (q . 10))`,
		out:  `1`,
		cost: 169,
	},
	{
		name: "equal-3",
		cmd:  `(= (q . 10) 1) 10`,
		out:  `1`,
		cost: 193,
	},
	{
		name: "equal-4",
		cmd:  `(= (q . 0) (q . 0))`,
		out:  `1`,
		cost: 167,
	},
	{
		name: "equal-5",
		cmd:  `(= (q . (0)) (q . 0))`,
		out:  `FAIL: = on list: arg0=(nil)`,
	},
	{
		name: "equal-6",
		cmd:  `(= (q . 2) (q . 3))`,
		out:  `()`,
		cost: 169,
	},
	{
		name: "equal-7",
		cmd:  `(= 3 3)`,
		out:  `FAIL: path into atom: env=nil`,
	},
	{
		name: "equal-8",
		cmd:  `(= (f 1) (+ (f (r 1)) (f (r (r 1))))) (7 3 4)`,
		out:  `1`,
		cost: 1203,
	},
	{
		name: "equal-9",
		cmd:  `(= (f 1) (+ (f (r 1)) (f (r (r 1))))) (7 3 3)`,
		out:  `()`,
		cost: 1203,
	},
	{
		name: "eval-1",
		cmd:  `(a (q . 1) (q . (100 200)))`,
		out:  `(100 200)`,
		cost: 184,
	},
	{
		name: "eval-2",
		cmd:  `(a (q . 1))`,
		out:  `FAIL: apply requires exactly 2 parameters, got 1: args=(q)`,
	},
	{
		name: "eval-3",
		cmd:  `(a (q . (c (f 1) (q . (105 200)))) (q . (100 200)))`,
		out:  `(100 105 200)`,
		cost: 286,
	},
	{
		name: "eval-4",
		cmd:  `(a (q . 0) (q . 1) (q . 2))`,
		out:  `FAIL: apply requires exactly 2 parameters, got 3: args=(nil 1 2)`,
	},
	{
		name: "first-1",
		cmd:  `(f (q . (100)))`,
		out:  `100`,
		cost: 60,
	},
	{
		name: "first-2",
		cmd:  `(f (q . (1 2 3)))`,
		out:  `1`,
		cost: 60,
	},
	{
		name: "first-3",
		cmd:  `(f (q . ()))`,
		out:  `FAIL: first of non-cons: arg=nil`,
	},
	{
		name: "first-4",
		cmd:  `(f (f (q . ((100 200 300) 400 500))))`,
		out:  `100`,
		cost: 91,
	},
	{
		name: "gr-s-1",
		cmd:  `(>s (q . 0x00) (q . ""))`,
		out:  `1`,
		cost: 168,
	},
	{
		name: "gr-s-10",
		cmd:  `(>s (q . 0x001004) (q . (100 200)))`,
		out:  `FAIL: >s on list: arg1=(100 200)`,
	},
	{
		name: "gr-s-2",
		cmd:  `(>s (q . 0x01) (q . 0x00))`,
		out:  `1`,
		cost: 169,
	},
	{
		name: "gr-s-3",
		cmd:  `(>s (q . 0x00) (q . 0x01))`,
		out:  `()`,
		cost: 169,
	},
	{
		name: "gr-s-4",
		cmd:  `(>s (q . 0x1000) (q . 0x1001))`,
		out:  `()`,
		cost: 171,
	},
	{
		name: "gr-s-5",
		cmd:  `(>s (q . 0x1000) (q . 0x01))`,
		out:  `1`,
		cost: 170,
	},
	{
		name: "gr-s-6",
		cmd:  `(>s (q . 0x1000) (q . 0x1000))`,
		out:  `()`,
		cost: 171,
	},
	{
		name: "gr-s-7",
		cmd:  `(>s (q . 0x001004) (q . 0x1005))`,
		out:  `()`,
		cost: 172,
	},
	{
		name: "gr-s-8",
		cmd:  `(>s (q . 0x1005) (q . 0x001004))`,
		out:  `1`,
		cost: 172,
	},
	{
		name: "gr-s-9",
		cmd:  `(>s (q . (100 200)) (q . 0x001004))`,
		out:  `FAIL: >s on list: arg0=(100 200)`,
	},
	{
		name: "greater-1",
		cmd:  `(> (q . 10))`,
		out:  `FAIL: > takes exactly 2 arguments (10)`,
	},
	{
		name: "greater-10",
		cmd:  `"(> (q . 0x000000000000000000000000000000000000000000000000000000000000000000493e0) (q . 0x00000000000000000000000000000000000000000000000000000000000005a))"`,
		out:  `1`,
		cost: 684,
	},
	{
		name: "greater-2",
		cmd:  `(> (q . 11) 1) 10`,
		out:  `1`,
		cost: 576,
	},
	{
		name: "greater-3",
		cmd:  `(> (q . 9) 1) 10`,
		out:  `()`,
		cost: 576,
	},
	{
		name: "greater-4",
		cmd:  `(> (q . 0) (q . 0))`,
		out:  `()`,
		cost: 548,
	},
	{
		name: "greater-5",
		cmd:  `(> (q . (0)) (q . 0))`,
		out:  `FAIL: > requires int args (())`,
	},
	{
		name: "greater-6",
		cmd:  `"(> 3 3)"`,
		out:  `FAIL: path into atom ()`,
	},
	{
		name: "greater-7",
		cmd:  `"(> (q . 3) (q . 300))"`,
		out:  `()`,
		cost: 554,
	},
	{
		name: "greater-8",
		cmd:  `"(> (q . 0x5a) (q . 0x493e0))"`,
		out:  `()`,
		cost: 556,
	},
	{
		name: "greater-9",
		cmd:  `"(> (q . 0x493e0) (q . 0x5a))"`,
		out:  `1`,
		cost: 556,
	},
	{
		name: "hex-1",
		cmd:  `(q . 0x00)`,
		out:  `0x00`,
		cost: 29,
	},
	{
		name: "hex-2",
		cmd:  `(q . 0x007eff)`,
		out:  `0x007eff`,
		cost: 29,
	},
	{
		name: "if_1",
		cmd:  `(i (q . 100) (q . 200) (q . 300))`,
		out:  `200`,
		cost: 103,
	},
	{
		name: "if_2",
		cmd:  `(i (q . ()) (q . 200) (q . 300))`,
		out:  `300`,
		cost: 103,
	},
	{
		name: "if_3",
		cmd:  `(i (q . 1) (q . 200) (q . 300))`,
		out:  `200`,
		cost: 103,
	},
	{
		name: "if_4",
		cmd:  `(i (f (r (r 1))) (f 1) (f (r 1))) (200 300 400)`,
		out:  `200`,
		cost: 361,
	},
	{
		name: "if_5",
		cmd:  `(i (f (r (r 1))) (f 1) (f (r 1))) (200 300 1)`,
		out:  `200`,
		cost: 361,
	},
	// {
	// 	name: "illegal-dot-expression",
	// 	cmd:  `(q . . 0 1)`,
	// 	out:  `FAIL: illegal dot expression at 3`,
	// },
	{
		name: "int-0",
		cmd:  `(q . 127)`,
		out:  `7f`,
		dump: true,
	},
	{
		name: "int-1",
		cmd:  `(q . 128)`,
		out:  `820080`,
		dump: true,
	},
	{
		name: "int-2",
		cmd:  `(q . -127)`,
		out:  `8181`,
		dump: true,
	},
	{
		name: "int-3",
		cmd:  `(q . -128)`,
		out:  `8180`,
		dump: true,
	},
	{
		name: "int-4",
		cmd:  `(q . 32767)`,
		out:  `827fff`,
		dump: true,
	},
	{
		name: "int-5",
		cmd:  `(q . 32768)`,
		out:  `83008000`,
		dump: true,
	},
	{
		name: "int-6",
		cmd:  `(q . -32767)`,
		out:  `828001`,
		dump: true,
	},
	{
		name: "int-7",
		cmd:  `(q . -32768)`,
		out:  `828000`,
		dump: true,
	},
	{
		name: "list-1",
		cmd:  `(l (q . 100))`,
		out:  `()`,
		cost: 49,
	},
	{
		name: "list-2",
		cmd:  `(l (q . (100)))`,
		out:  `1`,
		cost: 49,
	},
	{
		name: "list-3",
		cmd:  `(l)`,
		out:  `FAIL: l takes exactly 1 argument, got 0: args=nil`,
	},
	{
		name: "list-4",
		cmd:  `(l (q . 100) (q . 200))`,
		out:  `FAIL: l takes exactly 1 argument, got 2: args=(100 200)`,
	},
	{
		name: "list-5",
		cmd:  `(l 2) (50)`,
		out:  `()`,
		cost: 77,
	},
	{
		name: "logand-1",
		cmd:  `(logand (q . 0xfffe) (q . 93))`,
		out:  `92`,
		cost: 697,
	},
	{
		name: "logand-2",
		cmd:  `(logand (q . 13) (q . 12))`,
		out:  `12`,
		cost: 694,
	},
	{
		name: "logand-3",
		cmd:  `(logand (q . 13) (q . 12) (q . 4))`,
		out:  `4`,
		cost: 981,
	},
	{
		name: "logand-4",
		cmd:  `(logand)`,
		out:  `-1`,
		cost: 120,
	},
	{
		name: "logand-5",
		cmd:  `(logand (q . 0x000000000000000000000000000000000000000000000000000000000000fffe) (q . 0x00000000000000000000000000000000000000000000000000000000000005D))`,
		out:  `92`,
		cost: 880,
	},
	{
		name: "logior-1",
		cmd:  `(logior (q . 12) (q . 5))`,
		out:  `13`,
		cost: 694,
	},
	{
		name: "logior-2",
		cmd:  `(logior (q . 12) (q . 5) (q . 7))`,
		out:  `15`,
		cost: 981,
	},
	{
		name: "logior-3",
		cmd:  `(logior (q . 0x0000000000000000000000000000000000000000000000000000000000000000000000000000c) (q . 0x00005) (q . 0x00000000000000000000000000000000000000000000000000000000000000007))`,
		out:  `15`,
		cost: 1197,
	},
	{
		name: "lognot-1",
		cmd:  `(lognot (q . 12))`,
		out:  `-13`,
		cost: 374,
	},
	{
		name: "lognot-2",
		cmd:  `(lognot (q . -1))`,
		out:  `()`,
		cost: 364,
	},
	{
		name: "lognot-3",
		cmd:  `(lognot (q . 0))`,
		out:  `-1`,
		cost: 371,
	},
	{
		name: "lognot-4",
		cmd:  `(lognot (q . 734671943749191))`,
		out:  `0xfd63d1dbc431b8`,
		cost: 452,
	},
	{
		name: "lognot-5",
		cmd:  `(lognot)`,
		out:  `FAIL: lognot takes exactly 1 argument ()`,
	},
	{
		name: "lognot-6",
		cmd:  `(lognot (q . (foo)))`,
		out:  `FAIL: lognot requires int args ("foo")`,
	},
	{
		name:       "lognot-7",
		cmd:        `(lognot (q . 1) (q . 2))`,
		out:        `FAIL: lognot takes exactly 1 argument (1 2)`,
		cost:       -1,
		noKeywords: true,
	},
	{
		name: "lognot-8",
		cmd:  `(lognot (q . `,
		out:  `-2`,
		cost: 14903,
	},
	{
		name: "logxor-1",
		cmd:  `(logxor (q . 12) (q . 5))`,
		out:  `9`,
		cost: 694,
	},
	{
		name: "logxor-2",
		cmd:  `(logxor (q . 12) (q . 5) (q . 7))`,
		out:  `14`,
		cost: 981,
	},
	{
		name: "logxor-3",
		cmd:  `(logxor (q . 0x0000000000000000000000000000000000000000000000000000000000000000000000000c) (q . 0x00005) (q . 0x0000000000000000000000000000000000000000000000000000000000000000007))`,
		out:  `14`,
		cost: 1194,
	},
	{
		name: "lsh-1",
		cmd:  `(lsh (q . 7) (q . 1))`,
		out:  `14`,
		cost: 343,
	},
	{
		name: "lsh-2",
		cmd:  `(lsh (q . 7) (q . 100))`,
		out:  `0x70000000000000000000000000`,
		cost: 499,
	},
	{
		name: "lsh-3",
		cmd:  `(lsh (q . -7) (q . 100))`,
		out:  `0x0f90000000000000000000000000`,
		cost: 512,
	},
	{
		name: "lsh-4",
		cmd:  `(lsh (q . 0x90000000000000000000000000) (q . -100))`,
		out:  `9`,
		cost: 379,
	},
	{
		name:       "lsh-5",
		cmd:        `(lsh (q . 1))`,
		out:        `FAIL: lsh takes exactly 2 arguments (1)`,
		cost:       -1,
		noKeywords: true,
	},
	{
		name:       "lsh-6",
		cmd:        `(lsh (q . 1) (q . 1) (q . 1))`,
		out:        `FAIL: lsh takes exactly 2 arguments (1 1 1)`,
		cost:       -1,
		noKeywords: true,
	},
	{
		name: "lsh-7",
		cmd:  `(lsh (q . (foo)) (q . 1))`,
		out:  `FAIL: lsh requires int args ("foo")`,
	},
	{
		name: "lsh-8",
		cmd:  `(lsh (q . 500) (q . 65535))`,
		out:  `0x00fa`,
		cost: 106852,
	},
	{
		name: "lsh-9",
		cmd:  `(lsh (q . 500) (q . -65535))`,
		out:  `()`,
		cost: 333,
	},
	{
		name: "lsh-a",
		cmd:  `(lsh (q . 500) (q . 65536))`,
		out:  `FAIL: shift too large 0x010000`,
	},
	{
		name: "lsh-b",
		cmd:  `(lsh (q . 500) (q . -65536))`,
		out:  `FAIL: shift too large 0xff0000`,
	},
	{
		name: "lsh-c",
		cmd:  `(lsh (q . 0x00000000000000000000000000000000000000000000000000000000000000000007) (q . 0x000000000000000000000000000000000000000000000000000000000000000000001))`,
		out:  `FAIL: lsh requires int32 args (with no leading zeros) 0x0000000000000000000000000000000000000000000000000000000000000000000001`,
	},
	{
		name: "lsh-d",
		cmd:  `(lsh (q . 0xffffff) (q . 0))`,
		out:  `0x00ffffff`,
		cost: 385,
	},
	{
		name: "lsh-e",
		cmd:  `(lsh (q . 0xffffff) (q . 1))`,
		out:  `0x01fffffe`,
		cost: 388,
	},
	{
		name: "lsh-f",
		cmd:  `(lsh (q . 0x00ffffff) (q . -1))`,
		out:  `0x7fffff`,
		cost: 378,
	},
	{
		name: "lsh-g",
		cmd:  `(lsh (q . 0xffffff) (q . 8))`,
		out:  `0x00ffffff00`,
		cost: 398,
	},
	{
		name:    "max-cost-1",
		cmd:     `(c (q . 100) (q . 200))`,
		out:     `FAIL: cost exceeded 251`,
		maxCost: 73,
	},
	{
		name:    "max-cost-2",
		cmd:     `(c (q . 100) (q . 200))`,
		out:     `FAIL: cost exceeded 250`,
		maxCost: 72,
	},
	{
		name: "mul-1",
		cmd:  `(* (q . 7) (q . 2))`,
		out:  `14`,
		cost: 1049,
	},
	{
		name: "mul-2",
		cmd:  `(* (q . 1))`,
		out:  `1`,
		cost: 132,
	},
	{
		name: "mul-3",
		cmd:  `(* ())`,
		out:  `()`,
		cost: 146,
	},
	{
		name: "mul-4",
		cmd:  `(*)`,
		out:  `1`,
		cost: 112,
	},
	{
		name: "mul-5",
		cmd:  `(* (q . 0x00000000000000000000000000000000000000000000000000000000000000000000000007) (q . 0x000000000000000000000000000000000000000000000000000000000000000000000000000000002))`,
		out:  `14`,
		cost: 1516,
	},
	{
		name: "mul-6",
		cmd:  `(* (q . 7) (q . -1))`,
		out:  `-7`,
		cost: 1049,
	},
	{
		name: "not-1",
		cmd:  `(not (q . 0))`,
		out:  `1`,
		cost: 230,
	},
	{
		name: "not-2",
		cmd:  `(not (q . 1))`,
		out:  `()`,
		cost: 230,
	},
	{
		name: "not-3",
		cmd:  `(not (q . (foo bar)))`,
		out:  `()`,
		cost: 230,
	},
	{
		name: "path-1",
		cmd:  `1 1`,
		out:  `1`,
		cost: 53,
	},
	{
		name:       "path-10",
		cmd:        `0xD7 (0x1337 . (0x1337 . (0x1337 . ((0x1337 . ((0x1337 . 42) . 0x1337)) . 0x1337))))`,
		out:        `42`,
		cost:       81,
		noKeywords: true,
	},
	{
		name:       "path-11",
		cmd:        `0x000000000000000000000000`,
		out:        `()`,
		cost:       101,
		noKeywords: true,
	},
	{
		name:       "path-2",
		cmd:        `44 (((0x1337 . (0x1337 . (42 . 0x1337))) . 0x1337) . 0x1337)`,
		out:        `42`,
		cost:       73,
		noKeywords: true,
	},
	{
		name:       "path-3",
		cmd:        `7708975405620101644641102810267383005 (0x1337 . ((0x1337 . (0x1337 . (0x1337 . ((0x1337 . (0x1337 . (((0x1337 . ((0x1337 . (0x1337 . (0x1337 . (0x1337 . (0x1337 . ((0x1337 . (0x1337 . ((0x1337 . (((0x1337 . (0x1337 . (0x1337 . ((0x1337 . (((0x1337 . (((0x1337 . (0x1337 . (0x1337 . (0x1337 . ((0x1337 . ((0x1337 . (((((0x1337 . ((0x1337 . ((0x1337 . (0x1337 . (0x1337 . (((0x1337 . (0x1337 . ((0x1337 . (0x1337 . ((((0x1337 . (0x1337 . (0x1337 . (0x1337 . (((((0x1337 . (0x1337 . (0x1337 . (0x1337 . (0x1337 . (((((0x1337 . (((((0x1337 . ((0x1337 . (0x1337 . ((((0x1337 . ((((0x1337 . ((0x1337 . ((0x1337 . ((0x1337 . (0x1337 . (0x1337 . ((((0x1337 . (0x1337 . ((0x1337 . (((0x1337 . (0x1337 . (((0x1337 . (0x1337 . (0x1337 . (42 . 0x1337)))) . 0x1337) . 0x1337))) . 0x1337) . 0x1337)) . 0x1337))) . 0x1337) . 0x1337) . 0x1337)))) . 0x1337)) . 0x1337)) . 0x1337)) . 0x1337) . 0x1337) . 0x1337)) . 0x1337) . 0x1337) . 0x1337))) . 0x1337)) . 0x1337) . 0x1337) . 0x1337) . 0x1337)) . 0x1337) . 0x1337) . 0x1337) . 0x1337)))))) . 0x1337) . 0x1337) . 0x1337) . 0x1337))))) . 0x1337) . 0x1337) . 0x1337))) . 0x1337))) . 0x1337) . 0x1337)))) . 0x1337)) . 0x1337)) . 0x1337) . 0x1337) . 0x1337) . 0x1337)) . 0x1337)) . 0x1337))))) . 0x1337) . 0x1337)) . 0x1337) . 0x1337)) . 0x1337)))) . 0x1337) . 0x1337)) . 0x1337))) . 0x1337)))))) . 0x1337)) . 0x1337) . 0x1337))) . 0x1337)))) . 0x1337))`,
		out:        `42`,
		cost:       541,
		noKeywords: true,
	},
	{
		name:       "path-4",
		cmd:        `1 (((0x1337 . (0x1337 . (42 . 0x1337))) . 0x1337) . 0x1337)`,
		out:        `(((4919 4919 42 . 4919) . 4919) . 4919)`,
		cost:       53,
		noKeywords: true,
	},
	{
		name:       "path-5",
		cmd:        `0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (((0x1337 . (0x1337 . (42 . 0x1337))) . 0x1337) . 0x1337)`,
		out:        `(((4919 4919 42 . 4919) . 4919) . 4919)`,
		cost:       545,
		noKeywords: true,
	},
	{
		name:       "path-6",
		cmd:        `56800 ((((((0x1337 . (0x1337 . (0x1337 . (0x1337 . ((0x1337 . (0x1337 . (0x1337 . ((0x1337 . 42) . 0x1337)))) . 0x1337))))) . 0x1337) . 0x1337) . 0x1337) . 0x1337) . 0x1337)`,
		out:        `42`,
		cost:       117,
		noKeywords: true,
	},
	{
		name:       "path-7",
		cmd:        `4012287723 (0x1337 . (0x1337 . ((0x1337 . ((0x1337 . (0x1337 . (0x1337 . ((0x1337 . (0x1337 . (((0x1337 . ((0x1337 . ((0x1337 . (0x1337 . (((0x1337 . (((0x1337 . (0x1337 . (0x1337 . (0x1337 . ((0x1337 . (0x1337 . 42)) . 0x1337))))) . 0x1337) . 0x1337)) . 0x1337) . 0x1337))) . 0x1337)) . 0x1337)) . 0x1337) . 0x1337))) . 0x1337)))) . 0x1337)) . 0x1337)))`,
		out:        `42`,
		cost:       181,
		noKeywords: true,
	},
	{
		name:       "path-8",
		cmd:        `0x0000C8C141AB3121E776 ((0x1337 . (0x1337 . ((0x1337 . (0x1337 . (0x1337 . ((0x1337 . (0x1337 . (0x1337 . (((0x1337 . (0x1337 . (0x1337 . (0x1337 . (((((0x1337 . (((0x1337 . ((((0x1337 . (0x1337 . (((0x1337 . (0x1337 . ((0x1337 . ((0x1337 . ((0x1337 . (0x1337 . ((((((0x1337 . ((0x1337 . ((((((0x1337 . (0x1337 . ((((0x1337 . (((0x1337 . 42) . 0x1337) . 0x1337)) . 0x1337) . 0x1337) . 0x1337))) . 0x1337) . 0x1337) . 0x1337) . 0x1337) . 0x1337)) . 0x1337)) . 0x1337) . 0x1337) . 0x1337) . 0x1337) . 0x1337))) . 0x1337)) . 0x1337)) . 0x1337))) . 0x1337) . 0x1337))) . 0x1337) . 0x1337) . 0x1337)) . 0x1337) . 0x1337)) . 0x1337) . 0x1337) . 0x1337) . 0x1337))))) . 0x1337) . 0x1337)))) . 0x1337)))) . 0x1337))) . 0x1337)`,
		out:        `42`,
		cost:       313,
		noKeywords: true,
	},
	{
		name:       "path-9",
		cmd:        `0x00D7 (0x1337 . (0x1337 . (0x1337 . ((0x1337 . ((0x1337 . 42) . 0x1337)) . 0x1337))))`,
		out:        `42`,
		cost:       85,
		noKeywords: true,
	},
	{
		name: "point-add-1",
		cmd:  `(point_add (pubkey_for_exp (q . 1)) (pubkey_for_exp (q . 2)))`,
		out:  `0x89ece308f9d1f0131765212deca99697b112d61f9be9a5f1f3780a51335b3ff981747a0b2ca2179b96d2c0c9024e5224`,
		cost: 5442082,
	},
	{
		name: "point-add-2",
		cmd:  `(= (point_add (pubkey_for_exp (q . 2)) (pubkey_for_exp (q . 3))) (pubkey_for_exp (q . 5)))`,
		out:  `1`,
		cost: 6768565,
	},
	{
		name: "point-add-3",
		cmd:  `(= (point_add (pubkey_for_exp (q . -2)) (pubkey_for_exp (q . 5))) (pubkey_for_exp (q . 3)))`,
		out:  `1`,
		cost: 6768565,
	},
	{
		// # run (mod (X N) (defun power (X N) (if (= N 0) 1 (* X (power X (- N 1))))) (power X N))
		name: "power-1",
		cmd:  `(a (q . (a 2 (c 2 (c 5 (c 11 (q . ())))))) (c (q . (a (i (= 11 (q . ())) (q . (q . 1)) (q . (* 5 (a 2 (c 2 (c 5 (c (- 11 (q . 1)) (q . ())))))))) 1)) 1)) (5033 1000)`,
		out:  `0x024d4f505f1f813ca5e0ae8805bad8707347e65c5f7595da4852be5074288431d1df11a0c326d249f1f52ee051579403d1d0c23a7a1e9af18b7d7dc4c63c73542863c434ae9dfa80141a30cf4acee0d6c896aa2e64ea748404427a3bdaa1b97e4e09b8f5e4f8e9c568a4fc219532dbbad5ec54476d19b7408f8e7e7df16b830c20a1e83d90cc0620b0677b7606307f725539ef223561cdb276baf8e92156ee6492d97159c8f64768349ea7e219fd07fa818a59d81d0563b140396402f0ff758840da19808440e0a57c94c48ef84b4ab7ca8c5f010b69b8f443b12b50bd91bdcf2a96208ddac283fa294d6a99f369d57ab41d03eab5bb4809223c141ad94378516e6766a5054e22e997e260978af68a86893890d612f081b40d54fd1e940af35c0d7900c9a917e2458a61ef8a83f7211f519b2c5f015dfa7c2949ef8bedd02d3bad64ca9b2963dc2bb79f24092331133a7a299872079b9d0422b8fc0eeba4e12c7667ac7282cc6ff98a7c670614c9fce5a061b8d5cd4dd3c6d62d245688b62f9713dc2604bdd5bbc85c070c51f784a9ebac0e0eaa2e29e82d93e570887aa7e1a9d25baf0b2c55a4615f35ec0dbe9baa921569700f95e10cd2d4f6ba152a2ac288c37b60980df33dadfa920fd43dbbf55a0b333b88a3237d954e33d80ed6582019faf51db5f1b52e392559323f8bdd945e7fc6cb8f97f2b8417cfc184d7bfbfa5314d4114f95b725847523f1848d13c28ad96662298ee4e2d87af23e7cb4e58d7a20a5c57ae6833b4a37dcafccca0245a0d6ef28f83200d74db390281e03dd3a8b782970895764c3fcef31c5ed6d0b6e4e796a62ad5654691eea0d9db351cc4fee63248405b24c98bd5e68e4a5e0ab11e90e3c7de270c594d3a35639d931853b7010c8c896f6b28b2af719e53da65da89d44b926b6f06123c9217a43be35d751516bd02c18c4f868a2eae78ae3c6deab1115086c8ce58414db4561865d17ab95c7b3d4e1bfc6d0a4d3fbf5f20a0a7d77a9270e4da354c588da55b0063aec76654019ffb310e1503d99a7bc81ccdf5f8b15c8638156038624cf35988d8420bfdb59184c4b86bf5448df65c44aedc2e98eead7f1ba4be8f402baf12d41076b8f0991cfc778e04ba2c05d1440c70488ffaeefde537064035037f729b683e8ff1b3d0b4aa26a2b30bcaa9379f7fcc7072ff9a2c3e801c5979b0ab3e7acf89373de642d596f26514b9fa213ca217181a8429ad69d14445a822b16818c2509480576dc0ff7bac48c557e6d1883039f4daf873fa4f9a4d849130e2e4336049cfaf9e69a7664f0202b901cf07c7065c4dc93c46f98c5ea5c9c9d911b733093490da3bf1c95f43cd18b7be3798535a55ac6da3442946a268b74bde1349ca9807c41d90c7ec218a17efd2c21d5fcd720501f8a488f1dfba0a423dfdb2a877707b77930e80d734ceabcdb24513fad8f2e2470604d041df083bf184edd0e9720dd2b608b1ee1df951d7ce8ec671317b4f5a3946aa75280658b4ef77b3f504ce73e7ecac84eec3c2b45fb62f6fbd5ab78c744abd3bf5d0ab37d7b19124d2470d53db09ddc1f9dd9654b0e6a3a44c95d0a5a5e061bd24813508d3d1c901544dc3e6b84ca38dd2fde5ea60a57cbc12428848c4e3f6fd4941ebd23d709a717a090dd01830436659f7c20fd2d70c916427e9f3f12ac479128c2783f02a9824aa4e31de133c2704e049a50160f656e28aa0a2615b32bd48bb5d5d13d363a487324c1e9b8703be938bc545654465c9282ad5420978263b3e3ba1bb45e1a382554ac68e5a154b896c9c4c2c3853fbbfc877c4fb7dc164cc420f835c413839481b1d2913a68d206e711fb19b284a7bb2bd2033531647cf135833a0f3026b0c1dc0c184120d30ef4865985fdacdfb848ab963d2ae26a784b7b6a64fdb8feacf94febed72dcd0a41dc12be26ed79af88f1d9cba36ed1f95f2da8e6194800469091d2dfc7b04cfe93ab7a7a888b2695bca45a76a1458d08c3b6176ab89e7edc56c7e01142adfff944641b89cd5703a911145ac4ec42164d90b6fcd78b39602398edcd1f935485894fb8a1f416e031624806f02fbd07f398dbfdd48b86dfacf2045f85ecfe5bb1f01fae758dcdb4ae3b1e2aac6f0878f700d1f430b8ca47c9d8254059bd5c006042c4605f33ca98b41`,
		cost: 15025126,
	},
	{
		name: "pubkey-for-exp-1",
		cmd:  `(pubkey_for_exp (q . 1))`,
		out:  `0x97f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb`,
		cost: 1326278,
	},
	{
		name: "pubkey-for-exp-2",
		cmd:  `(pubkey_for_exp (q . 2))`,
		out:  `0xa572cbea904d67468808c8eb50a9450c9721db309128012543902d0ac358a62ae28f75bb8f1c7c42c39a8c5529bf0f4e`,
		cost: 1326278,
	},
	{
		name: "pubkey-for-exp-3",
		cmd:  `(pubkey_for_exp (q . 3))`,
		out:  `0x89ece308f9d1f0131765212deca99697b112d61f9be9a5f1f3780a51335b3ff981747a0b2ca2179b96d2c0c9024e5224`,
		cost: 1326278,
	},
	{
		name: "pubkey-for-exp-4",
		cmd:  `(pubkey_for_exp (q . -2))`,
		out:  `0x8572cbea904d67468808c8eb50a9450c9721db309128012543902d0ac358a62ae28f75bb8f1c7c42c39a8c5529bf0f4e`,
		cost: 1326278,
	},
	{
		name: "pubkey-for-exp-5",
		cmd:  `(pubkey_for_exp (q . 5))`,
		out:  `0xb0e7791fb972fe014159aa33a98622da3cdc98ff707965e536d8636b5fcc5ac7a91a8c46e59a00dca575af0f18fb13dc`,
		cost: 1326278,
	},
	{
		name: "quote-1",
		cmd:  `(q . 0)`,
		out:  `()`,
		cost: 29,
	},
	// {
	// 	name: "quote-2",
	// 	cmd:  `(q . 0 1)`,
	// 	out:  `FAIL: illegal dot expression at 3`,
	// },
	{
		name: "quote-3",
		cmd:  `(q . 0)`,
		out:  `()`,
		cost: 29,
	},
	// {
	// 	name: "quote-4",
	// 	cmd:  `(q . (0 1 (f (a)) (q . 15 20)))`,
	// 	out:  `FAIL: illegal dot expression at 21`,
	// },
	{
		name: "quote-5",
		cmd:  `(q)`,
		out:  `()`,
		cost: 29,
	},
	// {
	// 	name: "quote-6",
	// 	cmd:  `(q . 0 1)`,
	// 	out:  `FAIL: illegal dot expression at 3`,
	// },
	{
		name: "quote-7",
		cmd:  `(q 0 1)`,
		out:  `(() 1)`,
		cost: 29,
	},
	// {
	// 	name: "quote-8",
	// 	cmd:  `(q . )`,
	// 	out:  `FAIL: missing )`,
	// },
	{
		name: "quote-explicit-list",
		cmd:  `(q . ("A" "B"))`,
		out:  `(65 66)`,
	},
	{
		name: "quote-implicit-list",
		cmd:  `(q "A" "B")`,
		out:  `(65 66)`,
	},
	{
		name: "raise-1",
		cmd:  `(x (q . 2000))`,
		out:  `FAIL: clvm raise (2000)`,
	},
	{
		name: "raise-2",
		cmd:  `(x (q . 2000))`,
		out:  `FAIL: clvm raise (2000)`,
	},
	{
		name: "raise-3",
		cmd:  `(x (q . (100)) (q . (200)) (q . (300)))`,
		out:  `FAIL: clvm raise ((100) (200) (300))`,
	},
	{
		name: "rest-1",
		cmd:  `(r (q . (100)))`,
		out:  `()`,
		cost: 60,
	},
	{
		name: "rest-2",
		cmd:  `(r (q . (100 200 300)))`,
		out:  `(200 300)`,
		cost: 60,
	},
	{
		name: "rest-3",
		cmd:  `(r (q . ()))`,
		out:  `FAIL: rest of non-cons: arg=nil`,
	},
	{
		name: "rest-4",
		cmd:  `(r (r (q . ((100 200 300) 400 500))))`,
		out:  `(500)`,
		cost: 91,
	},
	{
		name: "sha256-1",
		cmd:  `(sha256 (f 1)) ("hello.there.my.dear.friend")`,
		out:  `0x5272821c151fdd49f19cc58cf8833da5781c7478a36d500e8dc2364be39f8216`,
		cost: 678,
	},
	{
		name: "sha256-2",
		cmd:  `(sha256 (q . "hel") (q . "lo.there.my.dear.friend"))`,
		out:  `0x5272821c151fdd49f19cc58cf8833da5781c7478a36d500e8dc2364be39f8216`,
		cost: 777,
	},
	{
		name: "sha256-3",
		cmd:  `(sha256 (f 1) (f (r 1))) ("hel" "lo.there.my.dear.friend")`,
		out:  `0x5272821c151fdd49f19cc58cf8833da5781c7478a36d500e8dc2364be39f8216`,
		cost: 918,
	},
	{
		name: "sha256-4",
		cmd:  `(sha256 1) (hello)`,
		out:  `FAIL: sha256 on list: arg=("hello")`,
	},
	{
		name: "simple_add",
		cmd:  `(+ (q . 10) (q . 20))`,
		out:  `30`,
		cost: 805,
	},
	{
		name: "softfork-1",
		cmd:  `(softfork (q . 50))`,
		out:  `()`,
		cost: 80,
	},
	{
		name: "softfork-2",
		cmd:  `(softfork (q . 51) (q . (+ 60 50)))`,
		out:  `()`,
		cost: 101,
	},
	{
		name: "softfork-3",
		cmd:  `(softfork (q . 3121) (q . (+ 60 50)))`,
		out:  `()`,
		cost: 3171,
	},
	{
		name: "softfork-4",
		cmd:  `(softfork (q . 0) (q . (+ 60 50)))`,
		out:  `FAIL: cost must be > 0 (() (+ 60 50))`,
	},
	{
		name: "softfork-5",
		cmd:  `(softfork (q . 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000050))`,
		out:  `()`,
		cost: 110,
	},
	{
		name: "strlen-1",
		cmd:  `(strlen 1) foo-bar`,
		out:  `7`,
		cost: 244,
	},
	{
		name: "strlen-2",
		cmd:  `(strlen 1) (foo-bar)`,
		out:  `FAIL: strlen on list ("foo-bar")`,
	},
	{
		name: "strlen-3",
		cmd:  `(strlen 1) ()`,
		out:  `()`,
		cost: 227,
	},
	{
		name: "strlen-4",
		cmd:  `(strlen 1) "the quick brown fox jumps over the lazy dogs"`,
		out:  `44`,
		cost: 281,
	},
	{
		name: "sub-1",
		cmd:  `(- (q . 7) (q . 1))`,
		out:  `6`,
		cost: 805,
	},
	{
		name: "sub-2",
		cmd:  `(- (q . 1))`,
		out:  `1`,
		cost: 462,
	},
	{
		name: "sub-3",
		cmd:  `(- ())`,
		out:  `()`,
		cost: 473,
	},
	{
		name: "sub-4",
		cmd:  `(-)`,
		out:  `()`,
		cost: 109,
	},
	{
		name: "sub-5",
		cmd:  `(- (q . 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007) (q . 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001))`,
		out:  `6`,
		cost: 1144,
	},
	{
		name: "substr-00",
		cmd:  `(substr (q . "abcdefghijkl") (q . 14))`,
		out:  `FAIL: invalid indices for substr: i1=14, i2=12, len=12: args=("abcdefghijkl" 14)`,
	},
	{
		name: "substr-01",
		cmd:  `(substr (q . "abcdefghijkl") (q . 0))`,
		out:  `"abcdefghijkl"`,
		cost: 51,
	},
	{
		name: "substr-02",
		cmd:  `(substr (q . "abcdefghijkl") (q . -1))`,
		out:  `FAIL: invalid indices for substr: i1=-1, i2=12, len=12: args=("abcdefghijkl" -1)`,
	},
	{
		name: "substr-03",
		cmd:  `(substr (q . "abcdefghijkl") (q . 12))`,
		out:  `()`,
		cost: 51,
	},
	{
		name: "substr-04",
		cmd:  `(substr (q . "abcdefghijkl") (q . 11))`,
		out:  `108`,
		cost: 51,
	},
	{
		name: "substr-05",
		cmd:  `(substr (q . "abcdefghijkl") 2 5) (0 4)`,
		out:  `"abcd"`,
		cost: 131,
	},
	{
		name: "substr-06",
		cmd:  `(substr (q . "abcdefghijkl") 2 5) (0 12)`,
		out:  `"abcdefghijkl"`,
		cost: 131,
	},
	{
		name: "substr-07",
		cmd:  `(substr (q . "abcdefghijkl") 2 5) (-1 12)`,
		out:  `FAIL: invalid indices for substr: i1=-1, i2=12, len=12: args=("abcdefghijkl" -1 12)`,
	},
	{
		name: "substr-08",
		cmd:  `(substr (q . "abcdefghijkl") 2 5) (0 13)`,
		out:  `FAIL: invalid indices for substr: i1=0, i2=13, len=12: args=("abcdefghijkl" nil 13)`,
	},
	{
		name: "substr-09",
		cmd:  `(substr (q . "abcdefghijkl") 2 5) (10 10)`,
		out:  `()`,
		cost: 131,
	},
	{
		name: "substr-10",
		cmd:  `(substr (q . "abcdefghijkl") 2 5) (10 9)`,
		out:  `FAIL: invalid indices for substr: i1=10, i2=9, len=12: args=("abcdefghijkl" 10 9)`,
	},
	{
		name: "substr-11",
		cmd:  `(substr (q . "abcdefghijkl") 2 5) (1 4)`,
		out:  `"bcd"`,
		cost: 131,
	},
	{
		name: "substr-12",
		cmd:  `(substr (q . "abcdefghijkl") 2 5) (8 12)`,
		out:  `"ijkl"`,
		cost: 131,
	},
	{
		name: "substr-13",
		cmd:  `(substr (q . ("abcdefghijkl")) 2 5) (0 4)`,
		out:  `FAIL: substr on list: arg0=("abcdefghijkl")`,
	},
	{
		name: "substr-14",
		cmd:  `(substr (q . "abcdefghijkl") 2 5) ((0) 4)`,
		out:  `FAIL: substr on list: arg1=(nil)`,
	},
	{
		name: "substr-15",
		cmd:  `(substr (q . "abcdefghijkl") 2 5) (0 (4))`,
		out:  `FAIL: substr on list: arg2=(c)`,
	},
	{
		name: "substr-16",
		cmd:  `(substr (q . "abcdefghijkl") (q . 0x000000000000000000000000000000000000000000000000000000000000000002) (q . 0x0000000000000000000000000000000000000000000000000000000000000005))`,
		out:  `FAIL: int32 requires 4 bytes at most, got 33: 0x000000000000000000000000000000000000000000000000000000000000000002: atom=0x000000000000000000000000000000000000000000000000000000000000000002`,
	},
	{
		name: "substr-17",
		cmd:  `(substr (q . "abcdefghijkl") 2 5) (0 -1)`,
		out:  `FAIL: invalid indices for substr: i1=0, i2=-1, len=12: args=("abcdefghijkl" nil -1)`,
	},
	{
		name: "substr-18",
		cmd:  `(substr (q . "abcdefghijkl") 2 5) (4294967297 3)`,
		out:  `FAIL: int32 requires 4 bytes at most, got 5: 0x0100000001: atom=0x0100000001`,
	},
	// {
	// 	name: "unknown-0",
	// 	cmd:  `(a (q 0x00ffffffffffffffffffff00) (q ()))`,
	// 	out:  `FAIL: invalid operator 0x00ffffffffffffffffffff00`,
	// },
}

// https://github.com/Chia-Network/clvm_tools/blob/main/clvm_tools/cmds.py#L107
func calculateCostOffset() int64 {
	cost, _, err := RunProgram(ATOM_NULL, ATOM_NULL)
	if err != nil {
		panic(err)
	}
	return 53 - cost
}

func TestRunProgram(t *testing.T) {
	for _, test := range tests {
		if strings.HasPrefix(test.name, "all-") ||
			strings.HasPrefix(test.name, "any-") ||
			strings.HasPrefix(test.name, "ash-") ||
			strings.HasPrefix(test.name, "div-") ||
			strings.HasPrefix(test.name, "divmod-") ||
			strings.HasPrefix(test.name, "greater-") ||
			strings.HasPrefix(test.name, "logior-") ||
			strings.HasPrefix(test.name, "lognot-") ||
			strings.HasPrefix(test.name, "logxor-") ||
			strings.HasPrefix(test.name, "lsh-") ||
			strings.HasPrefix(test.name, "not-") ||
			strings.HasPrefix(test.name, "point-add-") ||
			strings.HasPrefix(test.name, "power-") ||
			strings.HasPrefix(test.name, "pubkey-for-exp-") ||
			strings.HasPrefix(test.name, "raise-") ||
			strings.HasPrefix(test.name, "softfork-") ||
			strings.HasPrefix(test.name, "strlen-") ||
			strings.HasPrefix(test.name, "sub-") ||
			strings.HasPrefix(test.name, "max-cost-") {
			continue
		}

		cmd, args, err := CLVMOneOrTwoFromIRString(test.cmd)
		if err != nil {
			t.Fatalf("RunProgram %s: %s", test.name, err)
		}
		resCost, res, err := RunProgram(cmd, args)
		var resStr string
		if err == nil {
			if test.dump {
				resStr = hex.EncodeToString(res.Dump())
			} else {
				resStr = res.StringExt(CLVMStringExtCfg{Keywords: !test.noKeywords, OnlyHexValues: false, CompactLists: true, Nil: "()"})
			}
		} else {
			resStr = "FAIL: " + err.Error()
		}
		if resStr != test.out {
			t.Errorf("RunProgram %s: wrong output: %s != %s", test.name, resStr, test.out)
		}
		// calculate_cost_offset https://github.com/Chia-Network/clvm_tools/blob/main/clvm_tools/cmds.py#L107
		costOffset := calculateCostOffset()
		if test.cost != 0 && test.cost != resCost+costOffset {
			t.Errorf("RunProgram %s: wrong cost: %d != %d", test.name, resCost+costOffset, test.cost)
		}
	}
}
